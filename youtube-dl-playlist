#!/usr/bin/env python
# youtube-dl-playlist
# 
# Utility to download Youtube playlist videos.
# 
# @author Jordon Mears <jordoncm at gmail dot com>
# @license LGPL version 2 or greater <http://www.gnu.org/licenses/lgpl.html>

import sys
import urllib
import httplib
import json
import os
import shutil

def usage():
    print 'Usage: youtube-dl-playlist PLAYLIST_ID [DESTINATION_PATH]'

def getResponse(start, limit):
    parameters = {
        'alt' : 'json',
        'max-results' : limit,
        'start-index' : start,
        'v' : 2
    }

    connection = httplib.HTTPConnection('gdata.youtube.com')
    connection.request(
        'GET',
        '/feeds/api/playlists/' + PLAYLIST_ID + '/?' + urllib.urlencode(parameters)
    )
    response = connection.getresponse()
    
    return response

def createPath(path, title):
    title = title.replace('/', '')
    number = ''
    
    if os.path.exists(path + title) == True and os.path.isdir(path + title) == False:
        while(os.path.exists(path + title + str(number)) == True and os.path.isdir(path + title + str(number)) == False):
            if number == '':
                number = 0
            
            number = number + 1
    
    if os.path.exists(path + title + str(number)) == False:
        os.mkdir(path + title + str(number))
    
    return path + title + str(number)


if len(sys.argv) < 2:
    usage()
    sys.exit(1)
else:
    if sys.argv[1][0] == 'P' and sys.argv[1][1] == 'L':
        PLAYLIST_ID = sys.argv[1][2:]
    else:
        PLAYLIST_ID = sys.argv[1]

if len(sys.argv) == 3:
    DESTINATION_PATH = sys.argv[2] + '/'
else:
    DESTINATION_PATH = './'

sys.stdout.write('Getting playlist information ... ')
sys.stdout.flush()
response = getResponse(1, 0)
print 'done'

if response.status != 200:
    print 'Error: Not a valid/public playlist.'
    sys.exit(1)

data = response.read()
data = json.loads(data)

TOTAL_VIDEOS = int(data['feed']['openSearch$totalResults']['$t'])
print 'Total videos to download: ' + str(TOTAL_VIDEOS)

ACTUAL_PATH = createPath(DESTINATION_PATH, data['feed']['title']['$t'])
CURRENT_PATH = os.getcwd()

if os.path.exists('/tmp/youtube-dl-playlist'):
    shutil.rmtree('/tmp/youtube-dl-playlist', True)
os.mkdir('/tmp/youtube-dl-playlist')

existingFiles = os.listdir(ACTUAL_PATH)

i = 1
while(i <= TOTAL_VIDEOS):
    response = getResponse(i, 50)
    data = response.read()
    data = json.loads(data)
    
    for entry in data['feed']['entry']:
        newFilename = str(i).zfill(3) + ' - ' + entry['title']['$t'].replace('/', '')
        
        exists = False
        for existingFilename in existingFiles:
            if existingFilename.startswith(newFilename) == True and existingFilename[-4] == '.':
                exists = True
                break
        
        sys.stdout.write(str(i).zfill(3) + ': ' + entry['media$group']['yt$videoid']['$t'] + ' ... ')
        sys.stdout.flush()
        
        if exists == True:
            print 'already exists'
        else:
            try:
                os.chdir('/tmp/youtube-dl-playlist')
                os.system('youtube-dl -q http://www.youtube.com/watch?v=' + entry['media$group']['yt$videoid']['$t'])
                files = os.listdir('/tmp/youtube-dl-playlist')
                for filename in files:
                    if filename.startswith(entry['media$group']['yt$videoid']['$t']) == True:
                        break
                os.chdir(CURRENT_PATH)
                os.rename(
                    '/tmp/youtube-dl-playlist/' + filename,
                    ACTUAL_PATH + '/' + newFilename + filename[-4:]
                )
                print 'done'
            except Exception:
                print 'failed'
        
        i = i + 1

shutil.rmtree('/tmp/youtube-dl-playlist', True)
